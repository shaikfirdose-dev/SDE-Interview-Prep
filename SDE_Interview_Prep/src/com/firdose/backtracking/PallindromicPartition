
Leetcode: https://leetcode.com/problems/palindrome-partitioning/
T.C:O(N^2 * 2^N)

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans = new ArrayList<>();
        helper(0, new ArrayList<>(), ans, s);
        return ans;
    }

    public void helper(int idx, List<String> par, List<List<String>> ans, String s){
        if(idx==s.length()){
            ans.add(new ArrayList<>(par));
            return;
        }

        StringBuilder sb = new StringBuilder();
        for(int i=idx;i<s.length();i++){
            sb.append(s.charAt(i));
            String str = sb.toString();
            if(isPallindrome(str)){
                par.add(str);
                helper(i+1, par, ans, s);
                par.remove(par.size()-1);
            }
        }

        return;
    }


    private boolean isPallindrome(String s){
        int i=0;
        int j = s.length()-1;
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }

        return true;
    }
        
}
